##template properties
name =cx_mvpn_bgp_rs;
description = ;
tags = ;
userDefined = true;
supportedPlatforms = All;
templateType = POLICY;
templateSubType = DEVICE;
contentType = PYTHON;
implements = ;
dependencies = ;
published = false;
imports = ;
##
##template variables
@(DisplayName="Template Name", Description="Peer template name")
string TEMPLATE_NAME;

@(IsMandatory=False, DisplayName="Enable send-community Both")
boolean SEND_COM_BOTH {
    defaultValue=true;
};

@(IsMandatory=False, DisplayName="Route-map name out", Description="BGP policy to outgoing routes")
string ROUTE_MAP_OUT;

@(IsMandatory=False, DisplayName="Route-map name in", Description="BGP policy to inbound routes")
string ROUTE_MAP_IN;

##
##template content
from com.cisco.dcbu.vinci.rest.services.jython import PTIWrapper
from com.cisco.dcbu.vinci.rest.services.jython import WrappersResp
from com.cisco.dcbu.vinci.rest.services.jython import FabricWrapper
from com.cisco.dcbu.vinci.rest.services.jython import Helper
from com.cisco.dcbu.pti.resource import CtrlPolicySearch
from com.cisco.dcbu.vinci.rest.services.jython import InventoryWrapper

from utility import *

def add():
    try:
        Wrapper.print("======== cx_mvpn_bgp_rs add [%s] ==========" % SERIAL_NUMBER)
  
        respObj = WrappersResp.getRespObj()
  
        #get fabricName 
        invResp = InventoryWrapper.getFabricNameForSwitch(SERIAL_NUMBER)
        if invResp.isRetCodeSuccess():
            fabricName = invResp.getValue()
        else:
            respObj.setFailureRetCode()
            return respObj
  
        # Get fabric ASN 
        fabricAsn = None
        helperResp = Helper.getFabricAsn(fabricName)
        if helperResp.isRetCodeSuccess():
            fabricAsn = helperResp.getValue()
        else:
            Wrapper.print("Invalid ASN for Fabric %s" %(fabricName))
            return helperResp
  
        if ((fabricAsn == None) or (fabricAsn == "")):
            # we still have an invalid ASN
            errorMsg = ("Could not determine the BGP ASN for fabric [%s]" % (fabricName))
            respObj.addErrorReport("INVALID_ASN", errorMsg)
            respObj.setFailureRetCode()
            return respObj

        try:
          sub_send_com_both = SEND_COM_BOTH
        except:
          sub_send_com_both = "true"

        try:
          sub_route_map_out = ROUTE_MAP_OUT
        except:
          sub_route_map_out = ""
        
        try:
          sub_route_map_in = ROUTE_MAP_IN
        except:
          sub_route_map_in = ""


        delete()
        
        Util.exe(PTIWrapper.create(SERIAL_NUMBER, "SWITCH", "SWITCH", POLICY_ID,
                                   "bgp_af_mvpn",
                                   {"BGP_AS": fabricAsn
                                   }))
                                   
        Util.exe(PTIWrapper.create(SERIAL_NUMBER, "SWITCH", "SWITCH", POLICY_ID,
                                   "cx_sub_mvpn_bgp_rs",
                                   {"SUB_BGP_AS": fabricAsn,
                                    "SUB_TEMPLATE_NAME": TEMPLATE_NAME,
                                    "SUB_SEND_COM_BOTH": sub_send_com_both,
                                    "SUB_ROUTE_MAP_OUT": sub_route_map_out,
                                    "SUB_ROUTE_MAP_IN": sub_route_map_in
                                   }))
                                    
        
        respObj.setSuccessRetCode()
        return respObj
    except respObjError as e:
        return e.value
        
def delete():
    try:
        Wrapper.print("======== cx_mvpn_bgp_rs delete[%s] ==========" % SERIAL_NUMBER)

        respObj = WrappersResp.getRespObj()
        srchOpt = CtrlPolicySearch()
        srchOpt.setSerialNumber(SERIAL_NUMBER)
        srchOpt.setSource(POLICY_ID)
        ptiList = Util.exe(PTIWrapper.getPTIs(srchOpt))
        for pti in ptiList:
            Util.exe(PTIWrapper.markDeleteInstance(pti.getPolicyId()))

        respObj.setSuccessRetCode()
        return respObj
    except respObjError as e:
        return e.value
##
##