##template properties
name =cx_bgp_neighbor_inherit;
description = BGP policy that supports vrf, peer template and descriptions;
tags = ;
userDefined = true;
supportedPlatforms = All;
templateType = POLICY;
templateSubType = DEVICE;
contentType = PYTHON;
implements = ;
dependencies = ;
published = false;
imports = ;
##
##template variables

@(IsMandatory="False", DisplayName="VRF Name", Description="VRF Name")
string VRF_NAME;

@(DisplayName="BGP Neighbor IP", Description="IP address of BGP neighbor")
ipV4Address BGP_NEIGHBOR_IP
{
isAllowSubnet=true;
};

@(IsMandatory="False", DisplayName="Template Name", Description="Neighbor template name")
string TEMPLATE_NAME;

@(IsMandatory="False", DisplayName="Description", Description="BGP Neighbor Description")
string BGP_NEIGHBOR_DESCRIPTION;



#    Copyright (c) 2018-2019 by Cisco Systems, Inc.
#    All rights reserved.

##
##template content

from com.cisco.dcbu.vinci.rest.services.jython import PTIWrapper
from com.cisco.dcbu.vinci.rest.services.jython import WrappersResp
from com.cisco.dcbu.vinci.rest.services.jython import FabricWrapper
from com.cisco.dcbu.vinci.rest.services.jython import Helper
from com.cisco.dcbu.pti.resource import CtrlPolicySearch
from com.cisco.dcbu.vinci.rest.services.jython import InventoryWrapper

from utility import *

def add():
    try:
        Wrapper.print("======== cx_bgp_neighbor_inherit_description add [%s] ==========" % SERIAL_NUMBER)

        respObj = WrappersResp.getRespObj()
        respObj.setSuccessRetCode()


        #get fabricName 
        invResp = InventoryWrapper.getFabricNameForSwitch(SERIAL_NUMBER)
        if invResp.isRetCodeSuccess():
            fabricName = invResp.getValue()
        else:
            respObj.setFailureRetCode()
            return respObj

        # Get fabric ASN 
        fabricAsn = None
        helperResp = Helper.getFabricAsn(fabricName)
        if helperResp.isRetCodeSuccess():
            fabricAsn = helperResp.getValue()
        else:
            Wrapper.print("Invalid ASN for Fabric %s" %(fabricName))
            return helperResp

        if ((fabricAsn == None) or (fabricAsn == "")):
            # we still have an invalid ASN
            errorMsg = ("Could not determine the BGP ASN for fabric [%s]" % (fabricName))
            respObj.addErrorReport("INVALID_ASN", errorMsg)
            respObj.setFailureRetCode()
            return respObj
        
        # Temaplate Name and Bgp Neighbor description cannot both empty
        if ((TEMPLATE_NAME == "") and (BGP_NEIGHBOR_DESCRIPTION == "")):
            errorMsg = ("Temaplate Name and Bgp Neighbor description cannot both empty")
            respObj.addErrorReport("INVALID_ASN", errorMsg)
            respObj.setFailureRetCode()
            return respObj

        

        delete()
        
        Util.exe(PTIWrapper.createOrUpdate(SERIAL_NUMBER, "SWITCH", "SWITCH", POLICY_ID,
                                   "cx_sub_bgp_neighbor_inherit",
                                   {"SUB_BGP_AS": fabricAsn,
                                   "SUB_VRF_NAME": VRF_NAME,
                                   "SUB_TEMPLATE_NAME": TEMPLATE_NAME,
                                   "SUB_BGP_NEIGHBOR_IP": BGP_NEIGHBOR_IP,
                                   "SUB_DESCRIPTION": BGP_NEIGHBOR_DESCRIPTION
                                   }))

            

        return respObj
    except respObjError as e:
        return e.value

def delete():
    try:
        Wrapper.print("======== cx_bgp_neighbor_inherit_description delete[%s] ==========" % SERIAL_NUMBER)

        respObj = WrappersResp.getRespObj()
        srchOpt = CtrlPolicySearch()
        srchOpt.setSerialNumber(SERIAL_NUMBER)
        srchOpt.setSource(POLICY_ID)
        ptiList = Util.exe(PTIWrapper.getPTIs(srchOpt))
        for pti in ptiList:
            Util.exe(PTIWrapper.markDeleteInstance(pti.getPolicyId()))

        respObj.setSuccessRetCode()
        return respObj
    except respObjError as e:
        return e.value

##